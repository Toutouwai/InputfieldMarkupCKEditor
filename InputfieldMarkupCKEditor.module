<?php namespace ProcessWire;

class InputfieldMarkupCKEditor extends InputfieldMarkup implements ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Markup CKEditor',
			'summary' => 'Inputfield for displaying markup editable via CKEditor. For use with Form Builder module.',
			'version' => '0.1.4',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/InputfieldMarkupCKEditor',
			'icon' => 'wpforms',
			'requires' => 'ProcessWire>=3.0.16, PHP>=5.4.0',
		);
	}

	/**
	 * Method called right before Inputfield markup is rendered
	 *
	 * @param Inputfield|InputfieldWrapper|null $parent
	 * @param bool $renderValueMode
	 * @return bool
	 *
	 */
	public function renderReady(Inputfield $parent = null, $renderValueMode = false) {
		// Set skipLabel if the noLabel option is checked
		if($this->noLabel) $this->skipLabel = Inputfield::skipLabelHeader;
		return parent::renderReady($parent, $renderValueMode);
	}

	/**
	 * Hookable method for users who want to do advanced customisation of CKEditor inputfield
	 *
	 * @param InputfieldCKEditor $cke
	 * @param FormBuilderForm $form
	 * @param FormBuilderField $field
	 */
	public function ___ckeReady($cke, $form, $field) {
		return $cke;
	}

	/**
	 * Config inputfields
	 *
	 * Note: ProcessFormBuilder::buildEditField() calls this method twice
	 */
	public function ___getConfigInputfields() {
		$modules = $this->wire()->modules;
		$input = $this->wire()->input;

		// Get InputfieldMarkup config fields
		$inputfields = parent::___getConfigInputfields();

		// Remove the original markup text field
		$inputfields->remove('markupText');

		// Get textformatters field
		$textformatters = $inputfields->getChildByName('textformatters');
		
		// Get form and field
		$form = null;
		$field = null;
		/** @var ProcessFormBuilder $pfb */
		$pfb = $this->wire()->process;
		if($pfb instanceof ProcessFormBuilder) {
			$form = $pfb->getForm($input->get->int('id'));
			if($form) $field = $form->getFieldByName($input->get->name('name'));
		}

		// Add new CKEditor markup text field before textformatters field
		/** @var InputfieldCKEditor $cke */
		$cke = $modules->get('InputfieldCKEditor');
		$f_name = 'markupText';
		$cke->name = $f_name;
		$cke->id = $f_name;
		$cke->label = $this->_('Markup Text');
		$cke->rows = 10;
		$cke->value = $this->$f_name;
		// PW Image plugin is not supported
		$toolbar_config = isset($this->toolbar) ? $this->toolbar : $cke->toolbar;
		$cke->toolbar = str_replace('PWImage, ', '', $toolbar_config);
		// Allow all core CKEditor plugins
		$cke->removePlugins = '';
		// Remove PWImage extra plugin
		$cke->extraPlugins = 'pwlink, sourcedialog';
		// Call hookable method
		$cke = $this->ckeReady($cke, $form, $field);
		$inputfields->insertBefore($cke, $textformatters);

		// Checkbox field for option to hide inputfield label
		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'noLabel';
		$f->name = $f_name;
		$f->label = $this->_("Hide inputfield label in form");
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$inputfields->insertBefore($f, $textformatters);

		return $inputfields;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$modules = $this->wire()->modules;

		// Get CKEditor config fields
		/** @var InputfieldCKEditor $cke */
		$cke = $modules->get('InputfieldCKEditor');
		$wrapper = $cke->getConfigInputfields();
		// Get toolbar field
		$toolbar = $wrapper->getChildByName('toolbar');
		$toolbar_config = isset($this->toolbar) ? $this->toolbar : $toolbar->value;
		// PW Image plugin is not supported
		$toolbar_config = str_replace('PWImage, ', '', $toolbar_config);
		$toolbar->notes = str_replace('PWImage, ', '', $toolbar->notes);
		$toolbar->value = $toolbar_config;

		$inputfields->add($toolbar);
	}

}
